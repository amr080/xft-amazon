{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"/workspaces/xft-amazon/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/workspaces/xft-amazon/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/workspaces/xft-amazon/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/workspaces/xft-amazon/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/workspaces/xft-amazon/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/workspaces/xft-amazon/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork as _getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Formatter } from \"./formatter\"; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      var unique = {};\n      topic.forEach(function (topic) {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      var sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(function (topic) {\n    if (topic === \"\") {\n      return [];\n    }\n\n    var comps = topic.split(\"|\").map(function (topic) {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport var Event = /*#__PURE__*/function () {\n  function Event(tag, listener, once) {\n    _classCallCheck(this, Event);\n\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n\n  _createClass(Event, [{\n    key: \"event\",\n    get: function get() {\n      switch (this.type) {\n        case \"tx\":\n          return this.hash;\n\n        case \"filter\":\n          return this.filter;\n      }\n\n      return this.tag;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.tag.split(\":\")[0];\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n\n      if (comps[0] !== \"tx\") {\n        return null;\n      }\n\n      return comps[1];\n    }\n  }, {\n    key: \"filter\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n\n      if (comps[0] !== \"filter\") {\n        return null;\n      }\n\n      var address = comps[1];\n      var topics = deserializeTopics(comps[2]);\n      var filter = {};\n\n      if (topics.length > 0) {\n        filter.topics = topics;\n      }\n\n      if (address && address !== \"*\") {\n        filter.address = address;\n      }\n\n      return filter;\n    }\n  }, {\n    key: \"pollable\",\n    value: function pollable() {\n      return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n  }]);\n\n  return Event;\n}();\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nvar coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nvar matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nvar matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\n\nfunction _parseString(result) {\n  try {\n    return toUtf8String(_parseBytes(result));\n  } catch (error) {}\n\n  return null;\n}\n\nfunction _parseBytes(result) {\n  if (result === \"0x\") {\n    return null;\n  }\n\n  var offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n  var length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n} // Trim off the ipfs:// prefix and return the default gateway URL\n\n\nfunction getIpfsLink(link) {\n  return \"https://gateway.ipfs.io/ipfs/\".concat(link.substring(7));\n}\n\nexport var Resolver = /*#__PURE__*/function () {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  function Resolver(provider, address, name, resolvedAddress) {\n    _classCallCheck(this, Resolver);\n\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n\n  _createClass(Resolver, [{\n    key: \"_fetchBytes\",\n    value: function _fetchBytes(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var tx;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // e.g. keccak256(\"addr(bytes32,uint256)\")\n                tx = {\n                  to: this.address,\n                  data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n                };\n                _context.prev = 1;\n                _context.t0 = _parseBytes;\n                _context.next = 5;\n                return this.provider.call(tx);\n\n              case 5:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n              case 9:\n                _context.prev = 9;\n                _context.t2 = _context[\"catch\"](1);\n\n                if (!(_context.t2.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 13:\n                return _context.abrupt(\"return\", null);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(coinType, hexBytes) {\n      var coinInfo = coinInfos[String(coinType)];\n\n      if (coinInfo == null) {\n        logger.throwError(\"unsupported coin type: \".concat(coinType), Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress(\".concat(coinType, \")\")\n        });\n      }\n\n      if (coinInfo.ilk === \"eth\") {\n        return this.provider.formatter.address(hexBytes);\n      }\n\n      var bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n      if (coinInfo.p2pkh != null) {\n        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n        if (p2pkh) {\n          var length = parseInt(p2pkh[1], 16);\n\n          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n            return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n          }\n        }\n      } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n      if (coinInfo.p2sh != null) {\n        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n        if (p2sh) {\n          var _length = parseInt(p2sh[1], 16);\n\n          if (p2sh[2].length === _length * 2 && _length >= 1 && _length <= 75) {\n            return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n          }\n        }\n      } // Bech32\n\n\n      if (coinInfo.prefix != null) {\n        var _length2 = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n        var _version = bytes[0];\n\n        if (_version === 0x00) {\n          if (_length2 !== 20 && _length2 !== 32) {\n            _version = -1;\n          }\n        } else {\n          _version = -1;\n        }\n\n        if (_version >= 0 && bytes.length === 2 + _length2 && _length2 >= 1 && _length2 <= 75) {\n          var words = bech32.toWords(bytes.slice(2));\n          words.unshift(_version);\n          return bech32.encode(coinInfo.prefix, words);\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(coinType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var transaction, _hexBytes, hexBytes, address;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (coinType == null) {\n                  coinType = 60;\n                } // If Ethereum, use the standard `addr(bytes32)`\n\n\n                if (!(coinType === 60)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                _context2.prev = 2;\n                // keccak256(\"addr(bytes32)\")\n                transaction = {\n                  to: this.address,\n                  data: \"0x3b3b57de\" + namehash(this.name).substring(2)\n                };\n                _context2.next = 6;\n                return this.provider.call(transaction);\n\n              case 6:\n                _hexBytes = _context2.sent;\n\n                if (!(_hexBytes === \"0x\" || _hexBytes === HashZero)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 9:\n                return _context2.abrupt(\"return\", this.provider.formatter.callAddress(_hexBytes));\n\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](2);\n\n                if (!(_context2.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 16:\n                throw _context2.t0;\n\n              case 17:\n                _context2.next = 19;\n                return this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n              case 19:\n                hexBytes = _context2.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", null);\n\n              case 22:\n                // Compute the address\n                address = this._getAddress(coinType, hexBytes);\n\n                if (address == null) {\n                  logger.throwError(\"invalid or unsupported coin data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress(\".concat(coinType, \")\"),\n                    coinType: coinType,\n                    data: hexBytes\n                  });\n                }\n\n                return _context2.abrupt(\"return\", address);\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 12]]);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var linkage, avatar, i, match, scheme, selector, owner, comps, addr, tokenId, tokenOwner, balance, tx, metadataUrl, metadata, imageUrl, ipfs;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                linkage = [{\n                  type: \"name\",\n                  content: this.name\n                }];\n                _context3.prev = 1;\n                _context3.next = 4;\n                return this.getText(\"avatar\");\n\n              case 4:\n                avatar = _context3.sent;\n\n                if (!(avatar == null)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 7:\n                i = 0;\n\n              case 8:\n                if (!(i < matchers.length)) {\n                  _context3.next = 89;\n                  break;\n                }\n\n                match = avatar.match(matchers[i]);\n\n                if (!(match == null)) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                return _context3.abrupt(\"continue\", 86);\n\n              case 12:\n                scheme = match[1].toLowerCase();\n                _context3.t0 = scheme;\n                _context3.next = _context3.t0 === \"https\" ? 16 : _context3.t0 === \"data\" ? 18 : _context3.t0 === \"ipfs\" ? 20 : _context3.t0 === \"erc721\" ? 22 : _context3.t0 === \"erc1155\" ? 22 : 86;\n                break;\n\n              case 16:\n                linkage.push({\n                  type: \"url\",\n                  content: avatar\n                });\n                return _context3.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: avatar\n                });\n\n              case 18:\n                linkage.push({\n                  type: \"data\",\n                  content: avatar\n                });\n                return _context3.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: avatar\n                });\n\n              case 20:\n                linkage.push({\n                  type: \"ipfs\",\n                  content: avatar\n                });\n                return _context3.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: getIpfsLink(avatar)\n                });\n\n              case 22:\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                }); // The owner of this name\n\n                _context3.t1 = this._resolvedAddress;\n\n                if (_context3.t1) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 28;\n                return this.getAddress();\n\n              case 28:\n                _context3.t1 = _context3.sent;\n\n              case 29:\n                owner = _context3.t1;\n                comps = (match[2] || \"\").split(\"/\");\n\n                if (!(comps.length !== 2)) {\n                  _context3.next = 33;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 33:\n                _context3.next = 35;\n                return this.provider.formatter.address(comps[0]);\n\n              case 35:\n                addr = _context3.sent;\n                tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n\n                if (!(scheme === \"erc721\")) {\n                  _context3.next = 48;\n                  break;\n                }\n\n                _context3.t2 = this.provider.formatter;\n                _context3.next = 41;\n                return this.provider.call({\n                  to: addr,\n                  data: hexConcat([\"0x6352211e\", tokenId])\n                });\n\n              case 41:\n                _context3.t3 = _context3.sent;\n                tokenOwner = _context3.t2.callAddress.call(_context3.t2, _context3.t3);\n\n                if (!(owner !== tokenOwner)) {\n                  _context3.next = 45;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 45:\n                linkage.push({\n                  type: \"owner\",\n                  content: tokenOwner\n                });\n                _context3.next = 57;\n                break;\n\n              case 48:\n                if (!(scheme === \"erc1155\")) {\n                  _context3.next = 57;\n                  break;\n                }\n\n                _context3.t4 = BigNumber;\n                _context3.next = 52;\n                return this.provider.call({\n                  to: addr,\n                  data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                });\n\n              case 52:\n                _context3.t5 = _context3.sent;\n                balance = _context3.t4.from.call(_context3.t4, _context3.t5);\n\n                if (!balance.isZero()) {\n                  _context3.next = 56;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 56:\n                linkage.push({\n                  type: \"balance\",\n                  content: balance.toString()\n                });\n\n              case 57:\n                // Call the token contract for the metadata URL\n                tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n                _context3.t6 = _parseString;\n                _context3.next = 61;\n                return this.provider.call(tx);\n\n              case 61:\n                _context3.t7 = _context3.sent;\n                metadataUrl = (0, _context3.t6)(_context3.t7);\n\n                if (!(metadataUrl == null)) {\n                  _context3.next = 65;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 65:\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                }); // ERC-1155 allows a generic {id} in the URL\n\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                } // Get the token metadata\n\n\n                _context3.next = 69;\n                return fetchJson(metadataUrl);\n\n              case 69:\n                metadata = _context3.sent;\n\n                if (metadata) {\n                  _context3.next = 72;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 72:\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                }); // Pull the image URL out\n\n                imageUrl = metadata.image;\n\n                if (!(typeof imageUrl !== \"string\")) {\n                  _context3.next = 76;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 76:\n                if (!imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                  _context3.next = 79;\n                  break;\n                }\n\n                _context3.next = 84;\n                break;\n\n              case 79:\n                // Transform IPFS link to gateway\n                ipfs = imageUrl.match(matcherIpfs);\n\n                if (!(ipfs == null)) {\n                  _context3.next = 82;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 82:\n                linkage.push({\n                  type: \"url-ipfs\",\n                  content: imageUrl\n                });\n                imageUrl = getIpfsLink(imageUrl);\n\n              case 84:\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return _context3.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: imageUrl\n                });\n\n              case 86:\n                i++;\n                _context3.next = 8;\n                break;\n\n              case 89:\n                _context3.next = 93;\n                break;\n\n              case 91:\n                _context3.prev = 91;\n                _context3.t8 = _context3[\"catch\"](1);\n\n              case 93:\n                return _context3.abrupt(\"return\", null);\n\n              case 94:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 91]]);\n      }));\n    }\n  }, {\n    key: \"getContentHash\",\n    value: function getContentHash() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var hexBytes, ipfs, length, swarm;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._fetchBytes(\"0xbc1c58d1\");\n\n              case 2:\n                hexBytes = _context4.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 5:\n                // IPFS (CID: 1, Type: DAG-PB)\n                ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n                if (!ipfs) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                length = parseInt(ipfs[3], 16);\n\n                if (!(ipfs[4].length === length * 2)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]));\n\n              case 10:\n                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n                swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n                if (!swarm) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                if (!(swarm[1].length === 32 * 2)) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", \"bzz:/\\/\" + swarm[1]);\n\n              case 14:\n                return _context4.abrupt(\"return\", logger.throwError(\"invalid or unsupported content hash data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"getContentHash()\",\n                  data: hexBytes\n                }));\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var keyBytes, hexBytes;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // The key encoded as parameter to fetchBytes\n                keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n                // offset 64, with the length at offset 64 and data starting at offset 96\n\n                keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n                if (keyBytes.length % 32 !== 0) {\n                  keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n                }\n\n                _context5.next = 5;\n                return this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n              case 5:\n                hexBytes = _context5.sent;\n\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 8:\n                return _context5.abrupt(\"return\", toUtf8String(hexBytes));\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }]);\n\n  return Resolver;\n}();\nvar defaultFormatter = null;\nvar nextPollId = 1;\nexport var BaseProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(BaseProvider, _Provider);\n\n  var _super = _createSuper(BaseProvider);\n\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  function BaseProvider(network) {\n    var _this;\n\n    _classCallCheck(this, BaseProvider);\n\n    logger.checkNew(this instanceof BaseProvider ? this.constructor : void 0, Provider);\n    _this = _super.call(this); // Events being listened to\n\n    _this._events = [];\n    _this._emitted = {\n      block: -2\n    };\n    _this.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(_assertThisInitialized(_this), \"anyNetwork\", network === \"any\");\n\n    if (_this.anyNetwork) {\n      network = _this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      _this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(function (error) {}); // Trigger initial network setting (async)\n\n      _this._ready().catch(function (error) {});\n    } else {\n      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(_assertThisInitialized(_this), \"_network\", knownNetwork);\n\n        _this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    _this._maxInternalBlockNumber = -1024;\n    _this._lastBlockNumber = -2;\n    _this._pollingInterval = 4000;\n    _this._fastQueryDate = 0;\n    return _this;\n  }\n\n  _createClass(BaseProvider, [{\n    key: \"_ready\",\n    value: function _ready() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var network;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(this._network == null)) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                network = null;\n\n                if (!this._networkPromise) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                _context6.prev = 3;\n                _context6.next = 6;\n                return this._networkPromise;\n\n              case 6:\n                network = _context6.sent;\n                _context6.next = 11;\n                break;\n\n              case 9:\n                _context6.prev = 9;\n                _context6.t0 = _context6[\"catch\"](3);\n\n              case 11:\n                if (!(network == null)) {\n                  _context6.next = 15;\n                  break;\n                }\n\n                _context6.next = 14;\n                return this.detectNetwork();\n\n              case 14:\n                network = _context6.sent;\n\n              case 15:\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                  logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                } // Possible this call stacked so do not call defineReadOnly again\n\n\n                if (this._network == null) {\n                  if (this.anyNetwork) {\n                    this._network = network;\n                  } else {\n                    defineReadOnly(this, \"_network\", network);\n                  }\n\n                  this.emit(\"network\", network, null);\n                }\n\n              case 17:\n                return _context6.abrupt(\"return\", this._network);\n\n              case 18:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[3, 9]]);\n      }));\n    } // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this2 = this;\n\n      return poll(function () {\n        return _this2._ready().then(function (network) {\n          return network;\n        }, function (error) {\n          // If the network isn't running yet, we will wait\n          if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n            return undefined;\n          }\n\n          throw error;\n        });\n      });\n    } // @TODO: Remove this and just create a singleton formatter\n\n  }, {\n    key: \"_getInternalBlockNumber\",\n    value: // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    function _getInternalBlockNumber(maxAge) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _this3 = this;\n\n        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._ready();\n\n              case 2:\n                if (!(maxAge > 0)) {\n                  _context7.next = 20;\n                  break;\n                }\n\n              case 3:\n                if (!this._internalBlockNumber) {\n                  _context7.next = 20;\n                  break;\n                }\n\n                // ...\"remember\" which fetch we started with\n                internalBlockNumber = this._internalBlockNumber;\n                _context7.prev = 5;\n                _context7.next = 8;\n                return internalBlockNumber;\n\n              case 8:\n                result = _context7.sent;\n\n                if (!(getTime() - result.respTime <= maxAge)) {\n                  _context7.next = 11;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", result.blockNumber);\n\n              case 11:\n                return _context7.abrupt(\"break\", 20);\n\n              case 14:\n                _context7.prev = 14;\n                _context7.t0 = _context7[\"catch\"](5);\n\n                if (!(this._internalBlockNumber === internalBlockNumber)) {\n                  _context7.next = 18;\n                  break;\n                }\n\n                return _context7.abrupt(\"break\", 20);\n\n              case 18:\n                _context7.next = 3;\n                break;\n\n              case 20:\n                reqTime = getTime();\n                checkInternalBlockNumber = resolveProperties({\n                  blockNumber: this.perform(\"getBlockNumber\", {}),\n                  networkError: this.getNetwork().then(function (network) {\n                    return null;\n                  }, function (error) {\n                    return error;\n                  })\n                }).then(function (_ref) {\n                  var blockNumber = _ref.blockNumber,\n                      networkError = _ref.networkError;\n\n                  if (networkError) {\n                    // Unremember this bad internal block number\n                    if (_this3._internalBlockNumber === checkInternalBlockNumber) {\n                      _this3._internalBlockNumber = null;\n                    }\n\n                    throw networkError;\n                  }\n\n                  var respTime = getTime();\n                  blockNumber = BigNumber.from(blockNumber).toNumber();\n\n                  if (blockNumber < _this3._maxInternalBlockNumber) {\n                    blockNumber = _this3._maxInternalBlockNumber;\n                  }\n\n                  _this3._maxInternalBlockNumber = blockNumber;\n\n                  _this3._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n                  return {\n                    blockNumber: blockNumber,\n                    reqTime: reqTime,\n                    respTime: respTime\n                  };\n                });\n                this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n                checkInternalBlockNumber.catch(function (error) {\n                  // Don't null the dead (rejected) fetch, if it has already been updated\n                  if (_this3._internalBlockNumber === checkInternalBlockNumber) {\n                    _this3._internalBlockNumber = null;\n                  }\n                });\n                _context7.next = 26;\n                return checkInternalBlockNumber;\n\n              case 26:\n                return _context7.abrupt(\"return\", _context7.sent.blockNumber);\n\n              case 27:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[5, 14]]);\n      }));\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _this4 = this;\n\n        var pollId, runners, blockNumber, i;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n                runners = [];\n                blockNumber = null;\n                _context8.prev = 3;\n                _context8.next = 6;\n                return this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n\n              case 6:\n                blockNumber = _context8.sent;\n                _context8.next = 13;\n                break;\n\n              case 9:\n                _context8.prev = 9;\n                _context8.t0 = _context8[\"catch\"](3);\n                this.emit(\"error\", _context8.t0);\n                return _context8.abrupt(\"return\");\n\n              case 13:\n                this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n                this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n                if (!(blockNumber === this._lastBlockNumber)) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                this.emit(\"didPoll\", pollId);\n                return _context8.abrupt(\"return\");\n\n              case 18:\n                // First polling cycle, trigger a \"block\" events\n                if (this._emitted.block === -2) {\n                  this._emitted.block = blockNumber - 1;\n                }\n\n                if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                  logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                  this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                  }));\n                  this.emit(\"block\", blockNumber);\n                } else {\n                  // Notify all listener for each block that has passed\n                  for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                  }\n                } // The emitted block was updated, check for obsolete events\n\n\n                if (this._emitted.block !== blockNumber) {\n                  this._emitted.block = blockNumber;\n                  Object.keys(this._emitted).forEach(function (key) {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                      return;\n                    } // The block we were at when we emitted this event\n\n\n                    var eventBlockNumber = _this4._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n\n                    if (eventBlockNumber === \"pending\") {\n                      return;\n                    } // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n\n\n                    if (blockNumber - eventBlockNumber > 12) {\n                      delete _this4._emitted[key];\n                    }\n                  });\n                } // First polling cycle\n\n\n                if (this._lastBlockNumber === -2) {\n                  this._lastBlockNumber = blockNumber - 1;\n                } // Find all transaction hashes we are waiting on\n\n\n                this._events.forEach(function (event) {\n                  switch (event.type) {\n                    case \"tx\":\n                      {\n                        var hash = event.hash;\n\n                        var runner = _this4.getTransactionReceipt(hash).then(function (receipt) {\n                          if (!receipt || receipt.blockNumber == null) {\n                            return null;\n                          }\n\n                          _this4._emitted[\"t:\" + hash] = receipt.blockNumber;\n\n                          _this4.emit(hash, receipt);\n\n                          return null;\n                        }).catch(function (error) {\n                          _this4.emit(\"error\", error);\n                        });\n\n                        runners.push(runner);\n                        break;\n                      }\n\n                    case \"filter\":\n                      {\n                        var filter = event.filter;\n                        filter.fromBlock = _this4._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        var _runner = _this4.getLogs(filter).then(function (logs) {\n                          if (logs.length === 0) {\n                            return;\n                          }\n\n                          logs.forEach(function (log) {\n                            _this4._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            _this4._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                            _this4.emit(filter, log);\n                          });\n                        }).catch(function (error) {\n                          _this4.emit(\"error\", error);\n                        });\n\n                        runners.push(_runner);\n                        break;\n                      }\n                  }\n                });\n\n                this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n                Promise.all(runners).then(function () {\n                  _this4.emit(\"didPoll\", pollId);\n                }).catch(function (error) {\n                  _this4.emit(\"error\", error);\n                });\n                return _context8.abrupt(\"return\");\n\n              case 26:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[3, 9]]);\n      }));\n    } // Deprecated; do not use this\n\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      this._lastBlockNumber = blockNumber - 1;\n\n      if (this.polling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"network\",\n    get: function get() {\n      return this._network;\n    } // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"provider.detectNetwork\"\n                }));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var network, currentNetwork, error;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this._ready();\n\n              case 2:\n                network = _context10.sent;\n                _context10.next = 5;\n                return this.detectNetwork();\n\n              case 5:\n                currentNetwork = _context10.sent;\n\n                if (!(network.chainId !== currentNetwork.chainId)) {\n                  _context10.next = 23;\n                  break;\n                }\n\n                if (!this.anyNetwork) {\n                  _context10.next = 20;\n                  break;\n                }\n\n                this._network = currentNetwork; // Reset all internal block number guards and caches\n\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n\n                this.emit(\"network\", currentNetwork, network);\n                _context10.next = 19;\n                return stall(0);\n\n              case 19:\n                return _context10.abrupt(\"return\", this._network);\n\n              case 20:\n                error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                  event: \"changed\",\n                  network: network,\n                  detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n\n              case 23:\n                return _context10.abrupt(\"return\", network);\n\n              case 24:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      var _this5 = this;\n\n      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n        _this5._setFastBlockNumber(blockNumber);\n      }, function (error) {});\n\n      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n  }, {\n    key: \"polling\",\n    get: function get() {\n      return this._poller != null;\n    },\n    set: function set(value) {\n      var _this6 = this;\n\n      if (value && !this._poller) {\n        this._poller = setInterval(function () {\n          _this6.poll();\n        }, this.pollingInterval);\n\n        if (!this._bootstrapPoll) {\n          this._bootstrapPoll = setTimeout(function () {\n            _this6.poll(); // We block additional polls until the polling interval\n            // is done, to prevent overwhelming the poll function\n\n\n            _this6._bootstrapPoll = setTimeout(function () {\n              // If polling was disabled, something may require a poke\n              // since starting the bootstrap poll and it was disabled\n              if (!_this6._poller) {\n                _this6.poll();\n              } // Clear out the bootstrap so we can do another\n\n\n              _this6._bootstrapPoll = null;\n            }, _this6.pollingInterval);\n          }, 0);\n        }\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return this._pollingInterval;\n    },\n    set: function set(value) {\n      var _this7 = this;\n\n      if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n        throw new Error(\"invalid polling interval\");\n      }\n\n      this._pollingInterval = value;\n\n      if (this._poller) {\n        clearInterval(this._poller);\n        this._poller = setInterval(function () {\n          _this7.poll();\n        }, this._pollingInterval);\n      }\n    }\n  }, {\n    key: \"_getFastBlockNumber\",\n    value: function _getFastBlockNumber() {\n      var _this8 = this;\n\n      var now = getTime(); // Stale block number, request a newer value\n\n      if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n        this._fastQueryDate = now;\n        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n          if (_this8._fastBlockNumber == null || blockNumber > _this8._fastBlockNumber) {\n            _this8._fastBlockNumber = blockNumber;\n          }\n\n          return _this8._fastBlockNumber;\n        });\n      }\n\n      return this._fastBlockNumberPromise;\n    }\n  }, {\n    key: \"_setFastBlockNumber\",\n    value: function _setFastBlockNumber(blockNumber) {\n      // Older block, maybe a stale request\n      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n        return;\n      } // Update the time we updated the blocknumber\n\n\n      this._fastQueryDate = getTime(); // Newer block number, use  it\n\n      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n        this._fastBlockNumber = blockNumber;\n        this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n      }\n    }\n  }, {\n    key: \"waitForTransaction\",\n    value: function waitForTransaction(transactionHash, confirmations, timeout) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n    }\n  }, {\n    key: \"_waitForTransaction\",\n    value: function _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var _this9 = this;\n\n        var receipt;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.getTransactionReceipt(transactionHash);\n\n              case 2:\n                receipt = _context14.sent;\n\n                if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {\n                  _context14.next = 5;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", receipt);\n\n              case 5:\n                return _context14.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var cancelFuncs = [];\n                  var done = false;\n\n                  var alreadyDone = function alreadyDone() {\n                    if (done) {\n                      return true;\n                    }\n\n                    done = true;\n                    cancelFuncs.forEach(function (func) {\n                      func();\n                    });\n                    return false;\n                  };\n\n                  var minedHandler = function minedHandler(receipt) {\n                    if (receipt.confirmations < confirmations) {\n                      return;\n                    }\n\n                    if (alreadyDone()) {\n                      return;\n                    }\n\n                    resolve(receipt);\n                  };\n\n                  _this9.on(transactionHash, minedHandler);\n\n                  cancelFuncs.push(function () {\n                    _this9.removeListener(transactionHash, minedHandler);\n                  });\n\n                  if (replaceable) {\n                    var lastBlockNumber = replaceable.startBlock;\n                    var scannedBlock = null;\n\n                    var replaceHandler = function replaceHandler(blockNumber) {\n                      return __awaiter(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n                        var _this10 = this;\n\n                        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n                          while (1) {\n                            switch (_context13.prev = _context13.next) {\n                              case 0:\n                                if (!done) {\n                                  _context13.next = 2;\n                                  break;\n                                }\n\n                                return _context13.abrupt(\"return\");\n\n                              case 2:\n                                _context13.next = 4;\n                                return stall(1000);\n\n                              case 4:\n                                this.getTransactionCount(replaceable.from).then(function (nonce) {\n                                  return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n                                    var mined, block, ti, tx, _receipt, reason;\n\n                                    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n                                      while (1) {\n                                        switch (_context12.prev = _context12.next) {\n                                          case 0:\n                                            if (!done) {\n                                              _context12.next = 2;\n                                              break;\n                                            }\n\n                                            return _context12.abrupt(\"return\");\n\n                                          case 2:\n                                            if (!(nonce <= replaceable.nonce)) {\n                                              _context12.next = 6;\n                                              break;\n                                            }\n\n                                            lastBlockNumber = blockNumber;\n                                            _context12.next = 41;\n                                            break;\n\n                                          case 6:\n                                            _context12.next = 8;\n                                            return this.getTransaction(transactionHash);\n\n                                          case 8:\n                                            mined = _context12.sent;\n\n                                            if (!(mined && mined.blockNumber != null)) {\n                                              _context12.next = 11;\n                                              break;\n                                            }\n\n                                            return _context12.abrupt(\"return\");\n\n                                          case 11:\n                                            // First time scanning. We start a little earlier for some\n                                            // wiggle room here to handle the eventually consistent nature\n                                            // of blockchain (e.g. the getTransactionCount was for a\n                                            // different block)\n                                            if (scannedBlock == null) {\n                                              scannedBlock = lastBlockNumber - 3;\n\n                                              if (scannedBlock < replaceable.startBlock) {\n                                                scannedBlock = replaceable.startBlock;\n                                              }\n                                            }\n\n                                          case 12:\n                                            if (!(scannedBlock <= blockNumber)) {\n                                              _context12.next = 41;\n                                              break;\n                                            }\n\n                                            if (!done) {\n                                              _context12.next = 15;\n                                              break;\n                                            }\n\n                                            return _context12.abrupt(\"return\");\n\n                                          case 15:\n                                            _context12.next = 17;\n                                            return this.getBlockWithTransactions(scannedBlock);\n\n                                          case 17:\n                                            block = _context12.sent;\n                                            ti = 0;\n\n                                          case 19:\n                                            if (!(ti < block.transactions.length)) {\n                                              _context12.next = 38;\n                                              break;\n                                            }\n\n                                            tx = block.transactions[ti]; // Successfully mined!\n\n                                            if (!(tx.hash === transactionHash)) {\n                                              _context12.next = 23;\n                                              break;\n                                            }\n\n                                            return _context12.abrupt(\"return\");\n\n                                          case 23:\n                                            if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) {\n                                              _context12.next = 35;\n                                              break;\n                                            }\n\n                                            if (!done) {\n                                              _context12.next = 26;\n                                              break;\n                                            }\n\n                                            return _context12.abrupt(\"return\");\n\n                                          case 26:\n                                            _context12.next = 28;\n                                            return this.waitForTransaction(tx.hash, confirmations);\n\n                                          case 28:\n                                            _receipt = _context12.sent;\n\n                                            if (!alreadyDone()) {\n                                              _context12.next = 31;\n                                              break;\n                                            }\n\n                                            return _context12.abrupt(\"return\");\n\n                                          case 31:\n                                            // The reason we were replaced\n                                            reason = \"replaced\";\n\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                              reason = \"repriced\";\n                                            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                              reason = \"cancelled\";\n                                            } // Explain why we were replaced\n\n\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                              reason: reason,\n                                              replacement: this._wrapTransaction(tx),\n                                              hash: transactionHash,\n                                              receipt: _receipt\n                                            }));\n                                            return _context12.abrupt(\"return\");\n\n                                          case 35:\n                                            ti++;\n                                            _context12.next = 19;\n                                            break;\n\n                                          case 38:\n                                            scannedBlock++;\n                                            _context12.next = 12;\n                                            break;\n\n                                          case 41:\n                                            if (!done) {\n                                              _context12.next = 43;\n                                              break;\n                                            }\n\n                                            return _context12.abrupt(\"return\");\n\n                                          case 43:\n                                            this.once(\"block\", replaceHandler);\n\n                                          case 44:\n                                          case \"end\":\n                                            return _context12.stop();\n                                        }\n                                      }\n                                    }, _callee12, this);\n                                  }));\n                                }, function (error) {\n                                  if (done) {\n                                    return;\n                                  }\n\n                                  _this10.once(\"block\", replaceHandler);\n                                });\n\n                              case 5:\n                              case \"end\":\n                                return _context13.stop();\n                            }\n                          }\n                        }, _callee13, this);\n                      }));\n                    };\n\n                    if (done) {\n                      return;\n                    }\n\n                    _this9.once(\"block\", replaceHandler);\n\n                    cancelFuncs.push(function () {\n                      _this9.removeListener(\"block\", replaceHandler);\n                    });\n                  }\n\n                  if (typeof timeout === \"number\" && timeout > 0) {\n                    var timer = setTimeout(function () {\n                      if (alreadyDone()) {\n                        return;\n                      }\n\n                      reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n                        timeout: timeout\n                      }));\n                    }, timeout);\n\n                    if (timer.unref) {\n                      timer.unref();\n                    }\n\n                    cancelFuncs.push(function () {\n                      clearTimeout(timer);\n                    });\n                  }\n                }));\n\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                return _context15.abrupt(\"return\", this._getInternalBlockNumber(0));\n\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context16.next = 4;\n                return this.perform(\"getGasPrice\", {});\n\n              case 4:\n                result = _context16.sent;\n                _context16.prev = 5;\n                return _context16.abrupt(\"return\", BigNumber.from(result));\n\n              case 9:\n                _context16.prev = 9;\n                _context16.t0 = _context16[\"catch\"](5);\n                return _context16.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getGasPrice\",\n                  result: result,\n                  error: _context16.t0\n                }));\n\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[5, 9]]);\n      }));\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var params, result;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context17.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context17.sent;\n                _context17.next = 7;\n                return this.perform(\"getBalance\", params);\n\n              case 7:\n                result = _context17.sent;\n                _context17.prev = 8;\n                return _context17.abrupt(\"return\", BigNumber.from(result));\n\n              case 12:\n                _context17.prev = 12;\n                _context17.t0 = _context17[\"catch\"](8);\n                return _context17.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getBalance\",\n                  params: params,\n                  result: result,\n                  error: _context17.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var params, result;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context18.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context18.sent;\n                _context18.next = 7;\n                return this.perform(\"getTransactionCount\", params);\n\n              case 7:\n                result = _context18.sent;\n                _context18.prev = 8;\n                return _context18.abrupt(\"return\", BigNumber.from(result).toNumber());\n\n              case 12:\n                _context18.prev = 12;\n                _context18.t0 = _context18[\"catch\"](8);\n                return _context18.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getTransactionCount\",\n                  params: params,\n                  result: result,\n                  error: _context18.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        var params, result;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context19.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context19.sent;\n                _context19.next = 7;\n                return this.perform(\"getCode\", params);\n\n              case 7:\n                result = _context19.sent;\n                _context19.prev = 8;\n                return _context19.abrupt(\"return\", hexlify(result));\n\n              case 12:\n                _context19.prev = 12;\n                _context19.t0 = _context19[\"catch\"](8);\n                return _context19.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getCode\",\n                  params: params,\n                  result: result,\n                  error: _context19.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(addressOrName, position, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n        var params, result;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context20.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag),\n                  position: Promise.resolve(position).then(function (p) {\n                    return hexValue(p);\n                  })\n                });\n\n              case 4:\n                params = _context20.sent;\n                _context20.next = 7;\n                return this.perform(\"getStorageAt\", params);\n\n              case 7:\n                result = _context20.sent;\n                _context20.prev = 8;\n                return _context20.abrupt(\"return\", hexlify(result));\n\n              case 12:\n                _context20.prev = 12;\n                _context20.t0 = _context20[\"catch\"](8);\n                return _context20.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getStorageAt\",\n                  params: params,\n                  result: result,\n                  error: _context20.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this, [[8, 12]]);\n      }));\n    } // This should be called by any subclass wrapping a TransactionResponse\n\n  }, {\n    key: \"_wrapTransaction\",\n    value: function _wrapTransaction(tx, hash, startBlock) {\n      var _this11 = this;\n\n      if (hash != null && hexDataLength(hash) !== 32) {\n        throw new Error(\"invalid response - sendTransaction\");\n      }\n\n      var result = tx; // Check the hash we expect is the same as the hash the server reported\n\n      if (hash != null && tx.hash !== hash) {\n        logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n          expectedHash: tx.hash,\n          returnedHash: hash\n        });\n      }\n\n      result.wait = function (confirms, timeout) {\n        return __awaiter(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n          var replacement, receipt;\n          return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n            while (1) {\n              switch (_context21.prev = _context21.next) {\n                case 0:\n                  if (confirms == null) {\n                    confirms = 1;\n                  }\n\n                  if (timeout == null) {\n                    timeout = 0;\n                  } // Get the details to detect replacement\n\n\n                  replacement = undefined;\n\n                  if (confirms !== 0 && startBlock != null) {\n                    replacement = {\n                      data: tx.data,\n                      from: tx.from,\n                      nonce: tx.nonce,\n                      to: tx.to,\n                      value: tx.value,\n                      startBlock: startBlock\n                    };\n                  }\n\n                  _context21.next = 6;\n                  return this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n\n                case 6:\n                  receipt = _context21.sent;\n\n                  if (!(receipt == null && confirms === 0)) {\n                    _context21.next = 9;\n                    break;\n                  }\n\n                  return _context21.abrupt(\"return\", null);\n\n                case 9:\n                  // No longer pending, allow the polling loop to garbage collect this\n                  this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n                  if (receipt.status === 0) {\n                    logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                      transactionHash: tx.hash,\n                      transaction: tx,\n                      receipt: receipt\n                    });\n                  }\n\n                  return _context21.abrupt(\"return\", receipt);\n\n                case 12:\n                case \"end\":\n                  return _context21.stop();\n              }\n            }\n          }, _callee21, this);\n        }));\n      };\n\n      return result;\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(signedTransaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var hexTx, tx, blockNumber, hash;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context22.next = 4;\n                return Promise.resolve(signedTransaction).then(function (t) {\n                  return hexlify(t);\n                });\n\n              case 4:\n                hexTx = _context22.sent;\n                tx = this.formatter.transaction(signedTransaction);\n\n                if (tx.confirmations == null) {\n                  tx.confirmations = 0;\n                }\n\n                _context22.next = 9;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n              case 9:\n                blockNumber = _context22.sent;\n                _context22.prev = 10;\n                _context22.next = 13;\n                return this.perform(\"sendTransaction\", {\n                  signedTransaction: hexTx\n                });\n\n              case 13:\n                hash = _context22.sent;\n                return _context22.abrupt(\"return\", this._wrapTransaction(tx, hash, blockNumber));\n\n              case 17:\n                _context22.prev = 17;\n                _context22.t0 = _context22[\"catch\"](10);\n                _context22.t0.transaction = tx;\n                _context22.t0.transactionHash = tx.hash;\n                throw _context22.t0;\n\n              case 22:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[10, 17]]);\n      }));\n    }\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var _this12 = this;\n\n        var values, tx;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return transaction;\n\n              case 2:\n                values = _context23.sent;\n                tx = {};\n                [\"from\", \"to\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? _this12._getAddress(v) : null;\n                  });\n                });\n                [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? BigNumber.from(v) : null;\n                  });\n                });\n                [\"type\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v != null ? v : null;\n                  });\n                });\n\n                if (values.accessList) {\n                  tx.accessList = this.formatter.accessList(values.accessList);\n                }\n\n                [\"data\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? hexlify(v) : null;\n                  });\n                });\n                _context23.t0 = this.formatter;\n                _context23.next = 12;\n                return resolveProperties(tx);\n\n              case 12:\n                _context23.t1 = _context23.sent;\n                return _context23.abrupt(\"return\", _context23.t0.transactionRequest.call(_context23.t0, _context23.t1));\n\n              case 14:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n    }\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        var _this13 = this;\n\n        var result;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return filter;\n\n              case 2:\n                filter = _context24.sent;\n                result = {};\n\n                if (filter.address != null) {\n                  result.address = this._getAddress(filter.address);\n                }\n\n                [\"blockHash\", \"topics\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = filter[key];\n                });\n                [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = _this13._getBlockTag(filter[key]);\n                });\n                _context24.t0 = this.formatter;\n                _context24.next = 10;\n                return resolveProperties(result);\n\n              case 10:\n                _context24.t1 = _context24.sent;\n                return _context24.abrupt(\"return\", _context24.t0.filter.call(_context24.t0, _context24.t1));\n\n              case 12:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n    }\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n        var params, result;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context25.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n\n              case 4:\n                params = _context25.sent;\n                _context25.next = 7;\n                return this.perform(\"call\", params);\n\n              case 7:\n                result = _context25.sent;\n                _context25.prev = 8;\n                return _context25.abrupt(\"return\", hexlify(result));\n\n              case 12:\n                _context25.prev = 12;\n                _context25.t0 = _context25[\"catch\"](8);\n                return _context25.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"call\",\n                  params: params,\n                  result: result,\n                  error: _context25.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n        var params, result;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context26.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction)\n                });\n\n              case 4:\n                params = _context26.sent;\n                _context26.next = 7;\n                return this.perform(\"estimateGas\", params);\n\n              case 7:\n                result = _context26.sent;\n                _context26.prev = 8;\n                return _context26.abrupt(\"return\", BigNumber.from(result));\n\n              case 12:\n                _context26.prev = 12;\n                _context26.t0 = _context26[\"catch\"](8);\n                return _context26.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"estimateGas\",\n                  params: params,\n                  result: result,\n                  error: _context26.t0\n                }));\n\n              case 15:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(addressOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        var address;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return addressOrName;\n\n              case 2:\n                addressOrName = _context27.sent;\n\n                if (typeof addressOrName !== \"string\") {\n                  logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n                }\n\n                _context27.next = 6;\n                return this.resolveName(addressOrName);\n\n              case 6:\n                address = _context27.sent;\n\n                if (address == null) {\n                  logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                  });\n                }\n\n                return _context27.abrupt(\"return\", address);\n\n              case 9:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee29() {\n        var _this14 = this;\n\n        var blockNumber, params;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context29.next = 4;\n                return blockHashOrBlockTag;\n\n              case 4:\n                blockHashOrBlockTag = _context29.sent;\n                // If blockTag is a number (not \"latest\", etc), this is the block number\n                blockNumber = -128;\n                params = {\n                  includeTransactions: !!includeTransactions\n                };\n\n                if (!isHexString(blockHashOrBlockTag, 32)) {\n                  _context29.next = 11;\n                  break;\n                }\n\n                params.blockHash = blockHashOrBlockTag;\n                _context29.next = 21;\n                break;\n\n              case 11:\n                _context29.prev = 11;\n                _context29.next = 14;\n                return this._getBlockTag(blockHashOrBlockTag);\n\n              case 14:\n                params.blockTag = _context29.sent;\n\n                if (isHexString(params.blockTag)) {\n                  blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n\n                _context29.next = 21;\n                break;\n\n              case 18:\n                _context29.prev = 18;\n                _context29.t0 = _context29[\"catch\"](11);\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n\n              case 21:\n                return _context29.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {\n                    var _this15 = this;\n\n                    var block, _blockNumber, i, tx, confirmations, blockWithTxs;\n\n                    return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n                      while (1) {\n                        switch (_context28.prev = _context28.next) {\n                          case 0:\n                            _context28.next = 2;\n                            return this.perform(\"getBlock\", params);\n\n                          case 2:\n                            block = _context28.sent;\n\n                            if (!(block == null)) {\n                              _context28.next = 11;\n                              break;\n                            }\n\n                            if (!(params.blockHash != null)) {\n                              _context28.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"b:\" + params.blockHash] == null)) {\n                              _context28.next = 7;\n                              break;\n                            }\n\n                            return _context28.abrupt(\"return\", null);\n\n                          case 7:\n                            if (!(params.blockTag != null)) {\n                              _context28.next = 10;\n                              break;\n                            }\n\n                            if (!(blockNumber > this._emitted.block)) {\n                              _context28.next = 10;\n                              break;\n                            }\n\n                            return _context28.abrupt(\"return\", null);\n\n                          case 10:\n                            return _context28.abrupt(\"return\", undefined);\n\n                          case 11:\n                            if (!includeTransactions) {\n                              _context28.next = 34;\n                              break;\n                            }\n\n                            _blockNumber = null;\n                            i = 0;\n\n                          case 14:\n                            if (!(i < block.transactions.length)) {\n                              _context28.next = 31;\n                              break;\n                            }\n\n                            tx = block.transactions[i];\n\n                            if (!(tx.blockNumber == null)) {\n                              _context28.next = 20;\n                              break;\n                            }\n\n                            tx.confirmations = 0;\n                            _context28.next = 28;\n                            break;\n\n                          case 20:\n                            if (!(tx.confirmations == null)) {\n                              _context28.next = 28;\n                              break;\n                            }\n\n                            if (!(_blockNumber == null)) {\n                              _context28.next = 25;\n                              break;\n                            }\n\n                            _context28.next = 24;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 24:\n                            _blockNumber = _context28.sent;\n\n                          case 25:\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = _blockNumber - tx.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            tx.confirmations = confirmations;\n\n                          case 28:\n                            i++;\n                            _context28.next = 14;\n                            break;\n\n                          case 31:\n                            blockWithTxs = this.formatter.blockWithTransactions(block);\n                            blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) {\n                              return _this15._wrapTransaction(tx);\n                            });\n                            return _context28.abrupt(\"return\", blockWithTxs);\n\n                          case 34:\n                            return _context28.abrupt(\"return\", this.formatter.block(block));\n\n                          case 35:\n                          case \"end\":\n                            return _context28.stop();\n                        }\n                      }\n                    }, _callee28, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 22:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this, [[11, 18]]);\n      }));\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, false);\n    }\n  }, {\n    key: \"getBlockWithTransactions\",\n    value: function getBlockWithTransactions(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, true);\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee31() {\n        var _this16 = this;\n\n        var params;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context31.next = 4;\n                return transactionHash;\n\n              case 4:\n                transactionHash = _context31.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context31.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {\n                    var result, tx, blockNumber, confirmations;\n                    return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n                      while (1) {\n                        switch (_context30.prev = _context30.next) {\n                          case 0:\n                            _context30.next = 2;\n                            return this.perform(\"getTransaction\", params);\n\n                          case 2:\n                            result = _context30.sent;\n\n                            if (!(result == null)) {\n                              _context30.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context30.next = 6;\n                              break;\n                            }\n\n                            return _context30.abrupt(\"return\", null);\n\n                          case 6:\n                            return _context30.abrupt(\"return\", undefined);\n\n                          case 7:\n                            tx = this.formatter.transactionResponse(result);\n\n                            if (!(tx.blockNumber == null)) {\n                              _context30.next = 12;\n                              break;\n                            }\n\n                            tx.confirmations = 0;\n                            _context30.next = 19;\n                            break;\n\n                          case 12:\n                            if (!(tx.confirmations == null)) {\n                              _context30.next = 19;\n                              break;\n                            }\n\n                            _context30.next = 15;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 15:\n                            blockNumber = _context30.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - tx.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            tx.confirmations = confirmations;\n\n                          case 19:\n                            return _context30.abrupt(\"return\", this._wrapTransaction(tx));\n\n                          case 20:\n                          case \"end\":\n                            return _context30.stop();\n                        }\n                      }\n                    }, _callee30, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 7:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee33() {\n        var _this17 = this;\n\n        var params;\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                _context33.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context33.next = 4;\n                return transactionHash;\n\n              case 4:\n                transactionHash = _context33.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context33.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee32() {\n                    var result, receipt, blockNumber, confirmations;\n                    return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n                      while (1) {\n                        switch (_context32.prev = _context32.next) {\n                          case 0:\n                            _context32.next = 2;\n                            return this.perform(\"getTransactionReceipt\", params);\n\n                          case 2:\n                            result = _context32.sent;\n\n                            if (!(result == null)) {\n                              _context32.next = 7;\n                              break;\n                            }\n\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context32.next = 6;\n                              break;\n                            }\n\n                            return _context32.abrupt(\"return\", null);\n\n                          case 6:\n                            return _context32.abrupt(\"return\", undefined);\n\n                          case 7:\n                            if (!(result.blockHash == null)) {\n                              _context32.next = 9;\n                              break;\n                            }\n\n                            return _context32.abrupt(\"return\", undefined);\n\n                          case 9:\n                            receipt = this.formatter.receipt(result);\n\n                            if (!(receipt.blockNumber == null)) {\n                              _context32.next = 14;\n                              break;\n                            }\n\n                            receipt.confirmations = 0;\n                            _context32.next = 21;\n                            break;\n\n                          case 14:\n                            if (!(receipt.confirmations == null)) {\n                              _context32.next = 21;\n                              break;\n                            }\n\n                            _context32.next = 17;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                          case 17:\n                            blockNumber = _context32.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - receipt.blockNumber + 1;\n\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n\n                            receipt.confirmations = confirmations;\n\n                          case 21:\n                            return _context32.abrupt(\"return\", receipt);\n\n                          case 22:\n                          case \"end\":\n                            return _context32.stop();\n                        }\n                      }\n                    }, _callee32, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n\n              case 7:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee34() {\n        var params, logs;\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                _context34.next = 4;\n                return resolveProperties({\n                  filter: this._getFilter(filter)\n                });\n\n              case 4:\n                params = _context34.sent;\n                _context34.next = 7;\n                return this.perform(\"getLogs\", params);\n\n              case 7:\n                logs = _context34.sent;\n                logs.forEach(function (log) {\n                  if (log.removed == null) {\n                    log.removed = false;\n                  }\n                });\n                return _context34.abrupt(\"return\", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));\n\n              case 10:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n    }\n  }, {\n    key: \"getEtherPrice\",\n    value: function getEtherPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee35() {\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                _context35.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                return _context35.abrupt(\"return\", this.perform(\"getEtherPrice\", {}));\n\n              case 3:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35, this);\n      }));\n    }\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee36() {\n        var blockNumber;\n        return _regeneratorRuntime.wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return blockTag;\n\n              case 2:\n                blockTag = _context36.sent;\n\n                if (!(typeof blockTag === \"number\" && blockTag < 0)) {\n                  _context36.next = 11;\n                  break;\n                }\n\n                if (blockTag % 1) {\n                  logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n\n                _context36.next = 7;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n              case 7:\n                blockNumber = _context36.sent;\n                blockNumber += blockTag;\n\n                if (blockNumber < 0) {\n                  blockNumber = 0;\n                }\n\n                return _context36.abrupt(\"return\", this.formatter.blockTag(blockNumber));\n\n              case 11:\n                return _context36.abrupt(\"return\", this.formatter.blockTag(blockTag));\n\n              case 12:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n    }\n  }, {\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee37() {\n        var address;\n        return _regeneratorRuntime.wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.prev = 0;\n                _context37.next = 3;\n                return this._getResolver(name);\n\n              case 3:\n                address = _context37.sent;\n\n                if (!(address == null)) {\n                  _context37.next = 6;\n                  break;\n                }\n\n                return _context37.abrupt(\"return\", null);\n\n              case 6:\n                return _context37.abrupt(\"return\", new Resolver(this, address, name));\n\n              case 9:\n                _context37.prev = 9;\n                _context37.t0 = _context37[\"catch\"](0);\n\n                if (!(_context37.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context37.next = 13;\n                  break;\n                }\n\n                return _context37.abrupt(\"return\", null);\n\n              case 13:\n                throw _context37.t0;\n\n              case 14:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this, [[0, 9]]);\n      }));\n    }\n  }, {\n    key: \"_getResolver\",\n    value: function _getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee38() {\n        var network, transaction;\n        return _regeneratorRuntime.wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return this.getNetwork();\n\n              case 2:\n                network = _context38.sent;\n\n                // No ENS...\n                if (!network.ensAddress) {\n                  logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"ENS\",\n                    network: network.name\n                  });\n                } // keccak256(\"resolver(bytes32)\")\n\n\n                transaction = {\n                  to: network.ensAddress,\n                  data: \"0x0178b8bf\" + namehash(name).substring(2)\n                };\n                _context38.prev = 5;\n                _context38.t0 = this.formatter;\n                _context38.next = 9;\n                return this.call(transaction);\n\n              case 9:\n                _context38.t1 = _context38.sent;\n                return _context38.abrupt(\"return\", _context38.t0.callAddress.call(_context38.t0, _context38.t1));\n\n              case 13:\n                _context38.prev = 13;\n                _context38.t2 = _context38[\"catch\"](5);\n\n                if (!(_context38.t2.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context38.next = 17;\n                  break;\n                }\n\n                return _context38.abrupt(\"return\", null);\n\n              case 17:\n                throw _context38.t2;\n\n              case 18:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this, [[5, 13]]);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee39() {\n        var resolver;\n        return _regeneratorRuntime.wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return name;\n\n              case 2:\n                name = _context39.sent;\n                _context39.prev = 3;\n                return _context39.abrupt(\"return\", Promise.resolve(this.formatter.address(name)));\n\n              case 7:\n                _context39.prev = 7;\n                _context39.t0 = _context39[\"catch\"](3);\n\n                if (!isHexString(name)) {\n                  _context39.next = 11;\n                  break;\n                }\n\n                throw _context39.t0;\n\n              case 11:\n                if (typeof name !== \"string\") {\n                  logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n                } // Get the addr from the resovler\n\n\n                _context39.next = 14;\n                return this.getResolver(name);\n\n              case 14:\n                resolver = _context39.sent;\n\n                if (resolver) {\n                  _context39.next = 17;\n                  break;\n                }\n\n                return _context39.abrupt(\"return\", null);\n\n              case 17:\n                _context39.next = 19;\n                return resolver.getAddress();\n\n              case 19:\n                return _context39.abrupt(\"return\", _context39.sent);\n\n              case 20:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"lookupAddress\",\n    value: function lookupAddress(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee40() {\n        var reverseName, resolverAddress, bytes, length, name, addr;\n        return _regeneratorRuntime.wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                _context40.next = 2;\n                return address;\n\n              case 2:\n                address = _context40.sent;\n                address = this.formatter.address(address);\n                reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context40.next = 7;\n                return this._getResolver(reverseName);\n\n              case 7:\n                resolverAddress = _context40.sent;\n\n                if (resolverAddress) {\n                  _context40.next = 10;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 10:\n                _context40.t0 = arrayify;\n                _context40.next = 13;\n                return this.call({\n                  to: resolverAddress,\n                  data: \"0x691f3431\" + namehash(reverseName).substring(2)\n                });\n\n              case 13:\n                _context40.t1 = _context40.sent;\n                bytes = (0, _context40.t0)(_context40.t1);\n\n                if (!(bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32))) {\n                  _context40.next = 17;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 17:\n                bytes = bytes.slice(32); // Not a length-prefixed string\n\n                if (!(bytes.length < 32)) {\n                  _context40.next = 20;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 20:\n                // Get the length of the string (from the length-prefix)\n                length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n                bytes = bytes.slice(32); // Length longer than available data\n\n                if (!(length > bytes.length)) {\n                  _context40.next = 24;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 24:\n                name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n\n                _context40.next = 27;\n                return this.resolveName(name);\n\n              case 27:\n                addr = _context40.sent;\n\n                if (!(addr != address)) {\n                  _context40.next = 30;\n                  break;\n                }\n\n                return _context40.abrupt(\"return\", null);\n\n              case 30:\n                return _context40.abrupt(\"return\", name);\n\n              case 31:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar(nameOrAddress) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee41() {\n        var resolver, address, reverseName, resolverAddress, avatar;\n        return _regeneratorRuntime.wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                resolver = null;\n\n                if (!isHexString(nameOrAddress)) {\n                  _context41.next = 12;\n                  break;\n                }\n\n                // Address; reverse lookup\n                address = this.formatter.address(nameOrAddress);\n                reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context41.next = 6;\n                return this._getResolver(reverseName);\n\n              case 6:\n                resolverAddress = _context41.sent;\n\n                if (resolverAddress) {\n                  _context41.next = 9;\n                  break;\n                }\n\n                return _context41.abrupt(\"return\", null);\n\n              case 9:\n                resolver = new Resolver(this, resolverAddress, \"_\", address);\n                _context41.next = 17;\n                break;\n\n              case 12:\n                _context41.next = 14;\n                return this.getResolver(nameOrAddress);\n\n              case 14:\n                resolver = _context41.sent;\n\n                if (resolver) {\n                  _context41.next = 17;\n                  break;\n                }\n\n                return _context41.abrupt(\"return\", null);\n\n              case 17:\n                _context41.next = 19;\n                return resolver.getAvatar();\n\n              case 19:\n                avatar = _context41.sent;\n\n                if (!(avatar == null)) {\n                  _context41.next = 22;\n                  break;\n                }\n\n                return _context41.abrupt(\"return\", null);\n\n              case 22:\n                return _context41.abrupt(\"return\", avatar.url);\n\n              case 23:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(eventName, listener, once) {\n      var event = new Event(getEventTag(eventName), listener, once);\n\n      this._events.push(event);\n\n      this._startEvent(event);\n\n      return this;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      return this._addEventListener(eventName, listener, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      return this._addEventListener(eventName, listener, true);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this18 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var result = false;\n      var stopped = [];\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        setTimeout(function () {\n          event.listener.apply(_this18, args);\n        }, 0);\n        result = true;\n\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n\n        return true;\n      });\n      stopped.forEach(function (event) {\n        _this18._stopEvent(event);\n      });\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      if (!eventName) {\n        return this._events.length;\n      }\n\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).length;\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (eventName == null) {\n        return this._events.map(function (event) {\n          return event.listener;\n        });\n      }\n\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).map(function (event) {\n        return event.listener;\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      var _this19 = this;\n\n      if (listener == null) {\n        return this.removeAllListeners(eventName);\n      }\n\n      var stopped = [];\n      var found = false;\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag || event.listener != listener) {\n          return true;\n        }\n\n        if (found) {\n          return true;\n        }\n\n        found = true;\n        stopped.push(event);\n        return false;\n      });\n      stopped.forEach(function (event) {\n        _this19._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this20 = this;\n\n      var stopped = [];\n\n      if (eventName == null) {\n        stopped = this._events;\n        this._events = [];\n      } else {\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n\n          stopped.push(event);\n          return false;\n        });\n      }\n\n      stopped.forEach(function (event) {\n        _this20._stopEvent(event);\n      });\n      return this;\n    }\n  }], [{\n    key: \"getFormatter\",\n    value: function getFormatter() {\n      if (defaultFormatter == null) {\n        defaultFormatter = new Formatter();\n      }\n\n      return defaultFormatter;\n    } // @TODO: Remove this and just use getNetwork\n\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork(network) {\n      return _getNetwork(network == null ? \"homestead\" : network);\n    }\n  }]);\n\n  return BaseProvider;\n}(Provider);","map":{"version":3,"mappings":"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","names":["ForkEvent","Provider","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","type","hash","filter","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","encode","matcherIpfs","RegExp","matchers","_parseString","result","_parseBytes","error","offset","toNumber","getIpfsLink","link","substring","Resolver","provider","name","resolvedAddress","formatter","selector","parameters","tx","to","call","code","errors","CALL_EXCEPTION","coinType","hexBytes","coinInfo","String","throwError","UNSUPPORTED_OPERATION","operation","bytes","match","parseInt","words","toWords","unshift","transaction","callAddress","_fetchBytes","_getAddress","linkage","content","getText","avatar","i","scheme","push","url","_resolvedAddress","getAddress","owner","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","swarm","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","checkNew","_events","_emitted","block","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","then","NETWORK_ERROR","event","undefined","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","Math","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","getTransaction","mined","getBlockWithTransactions","ti","transactions","waitForTransaction","reason","eq","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","SERVER_ERROR","method","addressOrName","blockTag","_getBlockTag","params","position","p","expectedHash","returnedHash","wait","confirms","status","signedTransaction","t","hexTx","values","v","accessList","transactionRequest","_getTransactionRequest","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","_getBlock","transactionResponse","_getFilter","removed","arrayOf","filterLog","bind","_getResolver","ensAddress","getResolver","resolver","reverseName","resolverAddress","nameOrAddress","getAvatar","NOT_IMPLEMENTED","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found"],"sources":["/workspaces/xft-amazon/node_modules/@ethersproject/providers/src.ts/base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string): null | string {\n    try {\n        return toUtf8String(_parseBytes(result));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link.substring(7) }`;\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        try {\n            return _parseBytes(await this.provider.call(tx));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const transaction = {\n                    to: this.address,\n                    data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                };\n                const hexBytes = await this.provider.call(transaction);\n\n                // No address\n                if (hexBytes === \"0x\" || hexBytes === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(hexBytes);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n                        let metadataUrl = _parseString(await this.provider.call(tx))\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        logger.checkNew(new.target, Provider);\n\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    const filter = event.filter;\n                    filter.fromBlock = this._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n\n                    const runner = this.getLogs(filter).then((logs) => {\n                        if (logs.length === 0) { return; }\n                        logs.forEach((log: Log) => {\n                            this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            this.emit(filter, log);\n                        });\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n                    runners.push(runner);\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"call\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params, result, error\n            });\n        }\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        try {\n            const address = await this._getResolver(name);\n            if (address == null) { return null; }\n            return new Resolver(this, address, name);\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _getResolver(name: string): Promise<string> {\n        // Get the resolver from the blockchain\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        const transaction = {\n            to: network.ensAddress,\n            data: (\"0x0178b8bf\" + namehash(name).substring(2))\n        };\n\n        try {\n            return this.formatter.callAddress(await this.call(transaction));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resovler\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddress = await this._getResolver(reverseName);\n        if (!resolverAddress) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        let bytes = arrayify(await this.call({\n            to: resolverAddress,\n            data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n        }));\n\n        // Strip off the dynamic string pointer (0x20)\n        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) { return null; }\n        bytes = bytes.slice(32);\n\n        // Not a length-prefixed string\n        if (bytes.length < 32) { return null; }\n\n        // Get the length of the string (from the length-prefix)\n        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n        bytes = bytes.slice(32);\n\n        // Length longer than available data\n        if (length > bytes.length) { return null; }\n\n        const name = toUtf8String(bytes.slice(0, length));\n\n        // Make sure the reverse record matches the foward record\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(reverseName);\n            if (!resolverAddress) { return null; }\n\n            resolver = new Resolver(this, resolverAddress, \"_\", address);\n\n        } else {\n            // ENS name; forward lookup\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}